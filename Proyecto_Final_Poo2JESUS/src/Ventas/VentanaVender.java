/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventas;

import java.util.ArrayList;
import Tests.Ayudas;
import Tests.MemoriaDatos;
import ProductoArray.*;
import Kardex.kardex;
import KardexVector.kardexVector;
import Menu.MenuVendedor;
import Personas.Cliente;
import Personas.ClienteVector;
import Producto.Producto;
import Proveedor.Proveedor;
import Proveedor.ProveedorVector;
import java.io.BufferedReader;
import java.io.FileReader;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jesus
 */
public class VentanaVender extends javax.swing.JFrame {

    /**
     * Creates new form VentanaVender
     */
    // instancia de la clase VentaVector
    VentaVector ventasVector = new VentaVector();
    // instancia de la clase DetalleVentaVector;
    DetalleVentaVector detalleVentasVector = new DetalleVentaVector();
    // instancia de la clase Cliente
    ClienteVector clienteVector = new ClienteVector();
    // instancia de la clase proveedor vector
    ProveedorVector vectorproveedor = new ProveedorVector();
    //instancia de la clase KardxVector
    kardexVector vectorKardex = new kardexVector();
    // instancia de la clase productoVector (general)
    ProductArreglo vectorProductoGeneral = new ProductArreglo();
    //instancia de la clase productoProveedorVector (especifico)
    ProductosProveedorVector vectorProductoEspecifico = new ProductosProveedorVector();
    // instancia de la clase Tests
    Ayudas objAyuda = new Ayudas();
    // modelo tabla Carrito
    DefaultTableModel modeloTablaCarrito = new DefaultTableModel();
    
    public static String stridPRoveedor ;
    //int verificarAgregar = 0;
    Venta ventaRealiza;
    String IDCliente = "";
    String IDVenta = "";
    int montoTotal = 0;
    double totalPagar = 0;
    
    ArrayList<kardex> arregloKardexSalidasMemoria = new ArrayList<>();
    ArrayList<MemoriaDatos> memoriasProductoProveedor = new ArrayList<>();
    //ArrayList<Producto> arregloProductosMemoria = new ArrayList<>();;
    
    public VentanaVender() 
    {
        
        initComponents();
        txtIDVendedor.setText(stridPRoveedor);
        cargarModeloTablaCarrito();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnRealizarVenta = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCarrito = new javax.swing.JTable();
        btnCargarCboBox = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cboBoxIDCliente = new javax.swing.JComboBox<>();
        txtNombreCliente = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtDNICliente = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtIDVendedor = new javax.swing.JTextField();
        btnRegresar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtIDVenActualPanel2 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtIDClienteActualPanel2 = new javax.swing.JTextField();
        cboBoxProveedores = new javax.swing.JComboBox<>();
        cboBoxProductos = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        btnCargarCboBoxProvedor = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtNomCliPanel2 = new javax.swing.JTextField();
        txtDNICliPanel2 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtStockActual = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtCantidadVender = new javax.swing.JTextField();
        btnAgregarProductoVenta = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableCarrito = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnFinalizarVenta = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtMontoTotal = new javax.swing.JTextField();
        txtTotalPagar = new javax.swing.JTextField();
        btnCancelarVenta = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(102, 255, 255));
        jPanel2.setForeground(new java.awt.Color(0, 0, 0));

        jLabel2.setFont(new java.awt.Font("Arial Black", 3, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("REALIZAR VENTA: ");

        btnRealizarVenta.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        btnRealizarVenta.setText("Realizar Venta");
        btnRealizarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarVentaActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial Black", 3, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Lista de Productos en Carrito");

        tablaCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaCarrito);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(268, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel3);

        btnCargarCboBox.setText("Cargar Clientes, Productos y Proveedores");
        btnCargarCboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarCboBoxActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Seleccionar Cliente: ");

        cboBoxIDCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboBoxIDCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboBoxIDClienteActionPerformed(evt);
            }
        });

        txtNombreCliente.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        txtNombreCliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel9.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Nombre: ");

        jLabel10.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("DNI:");

        txtDNICliente.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        txtDNICliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel11.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("ID  VENDEDOR ACTUAL: ");

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRegresar)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRealizarVenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCargarCboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addComponent(cboBoxIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtDNICliente)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNombreCliente))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIDVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIDVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(17, 17, 17)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCargarCboBox)
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cboBoxIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(jLabel9)
                        .addGap(34, 34, 34)
                        .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(txtDNICliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(btnRealizarVenta)))
                .addGap(21, 21, 21)
                .addComponent(btnRegresar)
                .addGap(18, 18, 18))
        );

        txtNombreCliente.setEditable(false);
        txtDNICliente.setEditable(false);
        txtIDVendedor.setEditable(false);

        jTabbedPane1.addTab("Seleecionar Cliente", jPanel2);

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));

        jLabel12.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("ID  VENDEDOR ACTUAL: ");

        txtIDVenActualPanel2.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        txtIDVenActualPanel2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel13.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("ID  CLIENTE ACTUAL: ");

        txtIDClienteActualPanel2.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        txtIDClienteActualPanel2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cboBoxProveedores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboBoxProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboBoxProveedoresActionPerformed(evt);
            }
        });

        cboBoxProductos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboBoxProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboBoxProductosActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Seleccionar proveedor: ");

        jLabel15.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Seleccionar producto: ");

        jLabel16.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("Precio: ");

        btnCargarCboBoxProvedor.setText("Cargar Lista Proveedores Producto");
        btnCargarCboBoxProvedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarCboBoxProvedorActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Nombre:");

        jLabel18.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("DNI:");

        txtNomCliPanel2.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        txtNomCliPanel2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtDNICliPanel2.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        txtDNICliPanel2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel19.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("Stock: ");

        txtStockActual.setEditable(false);

        jLabel20.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("Cantidad a vender: ");

        txtCantidadVender.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N

        btnAgregarProductoVenta.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        btnAgregarProductoVenta.setText("Agregar al carrito");
        btnAgregarProductoVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProductoVentaActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Arial Black", 3, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 0));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Lista de Productos en Carrito");

        tableCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tableCarrito);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(152, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel5);

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Total a pagar: (S/)");

        btnFinalizarVenta.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        btnFinalizarVenta.setText("Finalizar Venta");
        btnFinalizarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarVentaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Monto Total: ");

        txtMontoTotal.setEditable(false);
        txtMontoTotal.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        txtMontoTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtTotalPagar.setEditable(false);
        txtTotalPagar.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        txtTotalPagar.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnCancelarVenta.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        btnCancelarVenta.setText("Cancelar Venta");
        btnCancelarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarVentaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAgregarProductoVenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboBoxProductos, 0, 176, Short.MAX_VALUE)
                            .addComponent(txtPrecio)
                            .addComponent(cboBoxProveedores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtStockActual)
                            .addComponent(txtCantidadVender)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCargarCboBoxProvedor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDNICliPanel2)
                                    .addComponent(txtNomCliPanel2)
                                    .addComponent(txtIDClienteActualPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIDVenActualPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(42, 42, 42))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnFinalizarVenta, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtMontoTotal)
                                    .addComponent(txtTotalPagar)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addGap(0, 61, Short.MAX_VALUE)
                                        .addComponent(btnCancelarVenta)))))
                        .addGap(38, 38, 38))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIDClienteActualPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtIDVenActualPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtNomCliPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDNICliPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCargarCboBoxProvedor)
                        .addGap(29, 29, 29)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboBoxProveedores, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboBoxProductos, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(txtStockActual, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCantidadVender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(67, 67, 67))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(txtMontoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotalPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAgregarProductoVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFinalizarVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCancelarVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        txtIDVenActualPanel2.setEditable(false);
        txtIDClienteActualPanel2.setEditable(false);
        txtPrecio.setEditable(false);
        txtNomCliPanel2.setEditable(false);
        txtDNICliPanel2.setEditable(false);

        jTabbedPane1.addTab("REALIZAR VENTA", jPanel4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void cargarModeloTablaCarrito()
    {
        modeloTablaCarrito.addColumn("ID VENTA");
        modeloTablaCarrito.addColumn("ID PRODUCTO");
        modeloTablaCarrito.addColumn("CANTIDAD");
        tablaCarrito.setModel(modeloTablaCarrito);
        tableCarrito.setModel(modeloTablaCarrito);
        //mostrarDatosCarrito();
    }
    
    public void cargarCboBoxProveedores()
    {
        cboBoxProveedores.removeAllItems();
        ArrayList<String> listaProveedores = objAyuda.obetenerListaDeProveedores();
        
        // cargando los datos de la lista proveedores al combo box
        for (int i = 0; i < listaProveedores.size(); i++)
        {
            String nombreProveedor = listaProveedores.get(i);
            cboBoxProveedores.addItem(nombreProveedor);           
        }
        cboBoxProveedores.setSelectedIndex(0);
        cboBoxProveedores.setSelectedItem(0);
    }
    
    public void cargarCboBoxProductos(String nombreProveedor)
    {
        cboBoxProductos.removeAllItems();
        ArrayList<String> listaProductos = objAyuda.obetenerListaDeProductosPorProveedores(nombreProveedor);
        
        // cargando los datos de la lista proveedores al combo box
        for (int i = 0; i < listaProductos.size(); i++)
        {
            String nombreProducto = listaProductos.get(i);
            cboBoxProductos.addItem(nombreProducto);           
        }
        cboBoxProductos.setSelectedIndex(0);
        cboBoxProductos.setSelectedItem(0);
    }
    
    public void cargarCboBoxProductosCarrito(ArrayList<Producto> listaProductos)
    {
        cboBoxProductos.removeAllItems();
        
        // cargando los datos de la lista proveedores al combo box
        for (int i = 0; i < listaProductos.size(); i++)
        {
            String nombreProducto = listaProductos.get(i).getNombre();
            cboBoxProductos.addItem(nombreProducto);           
        }
        cboBoxProductos.setSelectedIndex(0);
        cboBoxProductos.setSelectedItem(0);
    }
    
    public void cargarCboBoxCodCliente()
    {
        cboBoxIDCliente.removeAllItems();
        ArrayList<String> listaProductos = objAyuda.cargarCodigosClientes();
               
        for (int i =0; i <listaProductos.size(); i++)
        {
            cboBoxIDCliente.addItem(listaProductos.get(i));
        }
        
        cboBoxIDCliente.setSelectedIndex(0);
        cboBoxIDCliente.setSelectedItem(0);
    }
    
    private void btnCargarCboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarCboBoxActionPerformed
        // TODO add your handling code here:
        cargarCboBoxCodCliente();
    }//GEN-LAST:event_btnCargarCboBoxActionPerformed

    private void cboBoxIDClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboBoxIDClienteActionPerformed
        // TODO add your handling code here:
        try
        {
            String codClienteSeleccionado = cboBoxIDCliente.getSelectedItem().toString();
            Cliente objClienteBuscar = clienteVector.buscarcodigo(codClienteSeleccionado);
            String nombreCLiente = objClienteBuscar.getNombre();
            String DniCliente = objClienteBuscar.getDNI();
            txtNombreCliente.setText(nombreCLiente);
            txtDNICliente.setText(DniCliente);
        }
        catch(Exception e)
        {
            System.out.println("Ezcepcin en cboBoxProveedor " + e);
        }
    }//GEN-LAST:event_cboBoxIDClienteActionPerformed

    private void btnRealizarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarVentaActionPerformed
        // TODO add your handling code here:
        try
        {
            detalleVentasVector.vaciarVector();
            String  IDVendedor             = txtIDVendedor.getText();
            String  codClienteSeleccionado = cboBoxIDCliente.getSelectedItem().toString();
            Cliente objClienteBuscar       = clienteVector.buscarcodigo(codClienteSeleccionado);
            IDCliente                      = objClienteBuscar.getCodigoCliente();
            String  nombreCLiente          = objClienteBuscar.getNombre();
            String  DniCliente             = objClienteBuscar.getDNI();
            String  fecha                  = objAyuda.getFecha();
            
            // escribe los datos en el otro panel de realizar venta
            txtIDVenActualPanel2.setText(IDVendedor);
            txtIDClienteActualPanel2.setText(codClienteSeleccionado);
            txtNomCliPanel2.setText(nombreCLiente);
            txtDNICliPanel2.setText(DniCliente);
            
            // genera el codigo correlativo de la venta y lo guarda en el string global
            IDVenta = ventasVector.correlativo();
            
            // modificando valores de venta
            ventaRealiza = new Venta(IDVenta, IDCliente, IDVendedor, fecha); // crea la venta pero aun no la guarda
            detalleVentasVector.cargardatos_archivo_vector(IDCliente); // carga datos del archivo
            
            // redireccion y deshabilita el panel actual
            jTabbedPane1.setSelectedIndex(1);
            jTabbedPane1.setEnabledAt(0, false);
        }
        catch(Exception e)
        {
            System.out.println("Ezcepcin en cboBoxProveedor " + e);
        }
    }//GEN-LAST:event_btnRealizarVentaActionPerformed

    private void cboBoxProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboBoxProductosActionPerformed
        // TODO add your handling code here:
        try
        {
            String proveedorSeleccionado = cboBoxProveedores.getSelectedItem().toString();
            String productoSeleccionado  = cboBoxProductos.getSelectedItem().toString();
            Producto productoBuscar = vectorProductoGeneral.buscarNombreProveedor(productoSeleccionado, proveedorSeleccionado);
            ArrayList<Producto> arrayProductoEnMemoria = vectorProductoGeneral.getProductosEnMemoria();
            Producto productoBuscarMemoria = vectorProductoGeneral.encontrarProductoEnMemoria(arrayProductoEnMemoria,
                                                productoSeleccionado, proveedorSeleccionado);
            txtPrecio.setText(Double.toString(productoBuscarMemoria.getPrecio()));
            txtStockActual.setText(Integer.toString(productoBuscar.getCantidad()));
        }
        catch(Exception e)
        {
            System.out.println("Ezcepcin en cboBoxProveedor " + e);
        }
    }//GEN-LAST:event_cboBoxProductosActionPerformed

    private void btnCargarCboBoxProvedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarCboBoxProvedorActionPerformed
        // TODO add your handling code here:
        cargarCboBoxProveedores();
        cboBoxProductos.removeAllItems();
        cboBoxProductos.addItem("...");
    }//GEN-LAST:event_btnCargarCboBoxProvedorActionPerformed

    private void cboBoxProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboBoxProveedoresActionPerformed
        // TODO add your handling code here:
        try
        {
            String proveedorSeleccionado = cboBoxProveedores.getSelectedItem().toString();
            cargarCboBoxProductos(proveedorSeleccionado);
        }
        catch(Exception e)
        {
            System.out.println("Excepcion en cboBoxProveedores: " + e);
        }
    }//GEN-LAST:event_cboBoxProveedoresActionPerformed

    public void agregarDatosTablaCarrito(String idVentaActual)
    {
        modeloTablaCarrito.setRowCount(0);
        // creacion de arreglo para guardar los datos y subirlos a la tabla
        String datosMostrar[] = new String[3];
        // datos
        try
        {
            int i = 0;
            while(  i < detalleVentasVector.rows() ) 
            // obten la primera linea del archivo, y si la linea no hay nada,entonces termina
            {
                if(detalleVentasVector.get(i).getID_Venta().equals(idVentaActual))
                {
                    String IDveenta = detalleVentasVector.get(i).getID_Venta();
                    String IDProducto = detalleVentasVector.get(i).getID_Producto();
                    int cantidadVendida = detalleVentasVector.get(i).getCantidadVendidaProducto();
                
                    datosMostrar[0] = IDveenta; // nombre
                    datosMostrar[1] = IDProducto; // marca
                    datosMostrar[2] = Integer.toString(cantidadVendida); // definicion
                    modeloTablaCarrito.addRow(datosMostrar);
                }                
                i++;
            }
        }
        catch(Exception e) // lanzar un mensaje en caso de que suceda un error
        {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al cargar la tabla Producto de tipo: " + e);
        }
    }
    
    private void btnAgregarProductoVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProductoVentaActionPerformed
        // TODO add your handling code here:
        try
        {
            // arraylist global para almacenar  los datos del kardex
            arregloKardexSalidasMemoria.clear();
            vectorKardex.vaciarVector();
            vectorProductoEspecifico.vaciarArreglo();
            
            
            // obtener los datos del proveedor y producto seleecionado
            String proveedorSeleccionado = cboBoxProveedores.getSelectedItem().toString();
            String productoSeleccionado  = cboBoxProductos.getSelectedItem().toString();
            
            // buscar al producto dentro de la memoria Copia de acuerdo a los parametros producto-proveedor
            Producto productoEncontrado  = vectorProductoGeneral.buscarNombreProveedor(
                                            productoSeleccionado, proveedorSeleccionado);
            
            
            // carga los datos del kardex del producto seleccionado (archivo autentico)
            vectorKardex.cargardatos_archivo_vector(productoSeleccionado, proveedorSeleccionado);
            // guarda la copia delos datos del archivo kardex original a un arraylist<kardex>
            arregloKardexSalidasMemoria = vectorKardex.getKardexEnMemoria(productoSeleccionado, proveedorSeleccionado);
            
            // similar a cargar los datos de kardex original, carga la lista de productos de X provedor
            vectorProductoEspecifico.cargardatos_archivo_vector(proveedorSeleccionado);
            
            // verificar en caso no se haya encontrado el producto
            if (productoEncontrado.getCodigoProducto().equals("Error"))
            {
                JOptionPane.showMessageDialog(null, "No se eonctoro el producto");
            }
            else
            {
                
                // parametros para el kardex
                String codKardex            = vectorKardex.correlativo();
                String tipoDocumento        = objAyuda.generarCodigoBoleta(); // genera boleta B02-2315B
                String fecha                = objAyuda.getFecha();
                int    cantidadVender       = Integer.parseInt(txtCantidadVender.getText());
                int    nuevoStock           = productoEncontrado.getCantidad() - cantidadVender;
                double valorUnitario        = vectorKardex.obtenerUltimoKardex().getValorUnitario();
                double valorUnitarioRedond  = objAyuda.redondearPrecio(valorUnitario);
                double semiTotal            = productoEncontrado.getPrecio() * cantidadVender;
                double valorSalida          = vectorKardex.obtenerUltimoKardex().getValorUnitario()* cantidadVender;
                double valorSaldo           = vectorKardex.obtenerUltimoKardex().getSaldoValor() - valorSalida;
                double valorSaldoRedondeado = objAyuda.redondearPrecio(valorSaldo);
                double semiTotalRedoneado   = objAyuda.redondearPrecio(semiTotal); // redondeo
                double precioProducto       = productoEncontrado.getPrecio();
                // guardar de manera local el id del producto seleccionado 
                String IDProducto           = productoEncontrado.getCodigoProducto();
                
                // actualiza el montoTotal y el TotalPagar para la venta
                montoTotal = montoTotal + cantidadVender;
                totalPagar = totalPagar + semiTotalRedoneado;
                totalPagar = objAyuda.redondearPrecio(totalPagar);
                
                
                
                // se genera el detalleVenta
                DetalleVenta detalleVenta = new DetalleVenta(IDVenta, IDProducto, cantidadVender, tipoDocumento);
                // se genera el kardexDeSalida pq el producto esta saliendo 
                kardex kardexSalida = new kardex(codKardex,tipoDocumento,fecha,valorUnitarioRedond,
                                                 cantidadVender,semiTotalRedoneado,nuevoStock,valorSaldoRedondeado,precioProducto);
                
                System.out.println("ATENCION ID VENTA: " + IDVenta);
                System.out.println("\nES NUEVA VENTA ??: " + detalleVentasVector.detectarNuevaVenta(IDVenta));
                // detectar que la cantidad a vencer no pueda ser mayor al stock
                if (productoEncontrado.getCantidad() < cantidadVender)
                {
                    JOptionPane.showMessageDialog(null, "digite una cantidad menor");
                }
                else
                {
                    // detectar si es una nueva venta para un cliente
                    if (detalleVentasVector.detectarNuevaVenta(IDVenta) == true )
                    {
                        // verificar si el producto ya se agrego perviamente
                        boolean estadoProductoAgregado = detalleVentasVector.verificarExistenciaIDProducto(IDVenta, IDProducto);
                        System.out.println("ATENCION PRODUCTO EXISTENT: " + estadoProductoAgregado);
                        // detectar si el producto ya esta en el carrito
                        // caso de que SI se haya agregado
                        if (estadoProductoAgregado == true)
                        {
                            // aca se entiende que ya hubo una venta previa, los archivos principales aun no son afectados por los cambios
                            // busca en el kardex de memoria la ultima boleta agregada y la guarda en string local 
                            String boletaAnterior = vectorKardex.getBoletaAnterior(arregloKardexSalidasMemoria);
                            // se modifica la cantidad del producto en la lista de productos
                            productoEncontrado.setCantidad(nuevoStock);
                            // busca el ID de producto, obtiene la cantidad que se ha vendido, se le aumenta la nueva cantidad vendida
                            int cantidadAuemntada = detalleVentasVector.buscarIDVentaIDProducto(
                                                        IDVenta, IDProducto).getCantidadVendidaProducto()
                                                    + cantidadVender;
                            // cambia la boleta q se habia generado aleatoriamente por la boleta anterior
                            kardexSalida.setTipoDocumento(boletaAnterior);
                            detalleVenta.setCodigoBoleta(boletaAnterior);
                            // guarda los datos del kardex en memoria dentro del arraylist, luego lo guarda en un archivo temporal
                            vectorKardex.guardarKardexSalidaEnMemoria(arregloKardexSalidasMemoria,
                                                        productoSeleccionado, proveedorSeleccionado, kardexSalida);
                            // los parametros de producto y proveedor son para el formato del archivo: productoProveedorKardexTemporal

                            // actualiza el stock de los productos guardados en el arraylist (memoria)
                            //vectorProductoGeneral.cambiarStockTemporal(arregloProductosMemoria, productoEncontrado, nuevoStock);
                            // aumenta la cantidad vendida en el vector main
                            detalleVentasVector.aumentarCantidadVendida(IDVenta, IDProducto, cantidadAuemntada);

                            // mensaje de exito
                            JOptionPane.showMessageDialog(null, "Se agrego al carrito");
                            // los datos del arraylist en memoria los guarda en un archivo temporal, ya q ya estan actualizados los stocks
                            //vectorProductoGeneral.guardarDatosTemporal(arregloProductosMemoria);
                            // actualiza la tabla la cantidad vendida del producto X
                            agregarDatosTablaCarrito(IDVenta);


                            // muestra el montoTotal y TotalPagar hasta las ventas q se hayan realizado
                            txtMontoTotal.setText(Integer.toString(montoTotal));
                            txtTotalPagar.setText(Double.toString(totalPagar));
                        }
                        // caso de que NO se haya agregado
                        else
                        {
                            // actualiza el stock del producto ya q esta saliendo
                            productoEncontrado.setCantidad(nuevoStock);
                            // agrega el detalle de venta al vector main 
                            detalleVentasVector.agregarDetalle(detalleVenta);
                            // guarda los datos del kardex en memoria dentro del arraylist, luego lo guarda en un archivo temporal
                            vectorKardex.guardarKardexSalidaEnMemoria(arregloKardexSalidasMemoria,
                                                        productoSeleccionado, proveedorSeleccionado, kardexSalida);

                            // mensaje de exito
                            JOptionPane.showMessageDialog(null, "Se agrego al carrito");
                            // los datos del arraylist en memoria los guarda en un archivo temporal
                            //vectorProductoGeneral.guardarDatosTemporal(arregloProductosMemoria);
                            // actualiza la tabla agregando el  producto X vendido
                            agregarDatosTablaCarrito(IDVenta);

                            // guardar los datos del producto y proveedor seleccionado 
                            MemoriaDatos md = new MemoriaDatos(productoSeleccionado, proveedorSeleccionado);
                            memoriasProductoProveedor.add(md);

                            // actualiza el montoTotal y TotalPagar hasta las ventas q se hayan realizado
                            txtMontoTotal.setText(Integer.toString(montoTotal));
                            txtTotalPagar.setText(Double.toString(totalPagar));
                        }
                    }
                    else
                    {
                        // verificar si el producto ya se agrego perviamente
                        boolean estadoProductoAgregado = detalleVentasVector.verificarExistenciaIDProducto(IDVenta, IDProducto);
                        System.out.println("ATENCION PRODUCTO EXISTENT: " + estadoProductoAgregado);
                        // detectar si el producto ya esta en el carrito
                        // caso de que SI se haya agregado
                        if (estadoProductoAgregado == true)
                        {
                            // aca se entiende que ya hubo una venta previa, los archivos principales aun no son afectados por los cambios
                            // busca en el kardex de memoria la ultima boleta agregada y la guarda en string local 
                            String boletaAnterior = vectorKardex.getBoletaAnterior(arregloKardexSalidasMemoria);
                            // se modifica la cantidad del producto en la lista de productos
                            productoEncontrado.setCantidad(nuevoStock);
                            // busca el ID de producto, obtiene la cantidad que se ha vendido, se le aumenta la nueva cantidad vendida
                            int cantidadAuemntada = detalleVentasVector.buscarIDVentaIDProducto(
                                                        IDVenta, IDProducto).getCantidadVendidaProducto()
                                                    + cantidadVender;
                            // cambia la boleta q se habia generado aleatoriamente por la boleta anterior
                            kardexSalida.setTipoDocumento(boletaAnterior);
                            detalleVenta.setCodigoBoleta(boletaAnterior);
                            // guarda los datos del kardex en memoria dentro del arraylist, luego lo guarda en un archivo temporal
                            vectorKardex.guardarKardexSalidaEnMemoria(arregloKardexSalidasMemoria,
                                                        productoSeleccionado, proveedorSeleccionado, kardexSalida);
                            // los parametros de producto y proveedor son para el formato del archivo: productoProveedorKardexTemporal

                            // actualiza el stock de los productos guardados en el arraylist (memoria)
                            //vectorProductoGeneral.cambiarStockTemporal(arregloProductosMemoria, productoEncontrado, nuevoStock);
                            // aumenta la cantidad vendida en el vector main
                            detalleVentasVector.aumentarCantidadVendida(IDVenta, IDProducto, cantidadAuemntada);

                            // mensaje de exito
                            JOptionPane.showMessageDialog(null, "Se agrego al carrito");
                            // los datos del arraylist en memoria los guarda en un archivo temporal, ya q ya estan actualizados los stocks
                            //vectorProductoGeneral.guardarDatosTemporal(arregloProductosMemoria);
                            // actualiza la tabla la cantidad vendida del producto X
                            agregarDatosTablaCarrito(IDVenta);


                            // muestra el montoTotal y TotalPagar hasta las ventas q se hayan realizado
                            txtMontoTotal.setText(Integer.toString(montoTotal));
                            txtTotalPagar.setText(Double.toString(totalPagar));
                        }
                        // caso de que NO se haya agregado
                        else
                        {
                            // actualiza el stock del producto ya q esta saliendo
                            productoEncontrado.setCantidad(nuevoStock);
                            // agrega el detalle de venta al vector main 
                            detalleVentasVector.agregarDetalle(detalleVenta);
                            // guarda los datos del kardex en memoria dentro del arraylist, luego lo guarda en un archivo temporal
                            vectorKardex.guardarKardexSalidaEnMemoria(arregloKardexSalidasMemoria,
                                                        productoSeleccionado, proveedorSeleccionado, kardexSalida);

                            // mensaje de exito
                            JOptionPane.showMessageDialog(null, "Se agrego al carrito");
                            // los datos del arraylist en memoria los guarda en un archivo temporal
                            //vectorProductoGeneral.guardarDatosTemporal(arregloProductosMemoria);
                            // actualiza la tabla agregando el  producto X vendido
                            agregarDatosTablaCarrito(IDVenta);

                            // guardar los datos del producto y proveedor seleccionado 
                            MemoriaDatos md = new MemoriaDatos(productoSeleccionado, proveedorSeleccionado);
                            memoriasProductoProveedor.add(md);

                            // actualiza el montoTotal y TotalPagar hasta las ventas q se hayan realizado
                            txtMontoTotal.setText(Integer.toString(montoTotal));
                            txtTotalPagar.setText(Double.toString(totalPagar));
                        }
                    } 
                }
                               
            }
        }
        catch(Exception e)
        {
            System.out.println("Excepcion en btnAgregaAlCarrito: " + e);
        }
        
    }//GEN-LAST:event_btnAgregarProductoVentaActionPerformed

    private void btnCancelarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarVentaActionPerformed
        // TODO add your handling code here:
        try
        {
            int confirmed = JOptionPane.showConfirmDialog(null, 
            "¿Esta seguro de cancelar la venta?", "Mensaje de Avertencia",
            JOptionPane.YES_NO_OPTION);
            if (confirmed == JOptionPane.YES_OPTION) 
            {
                // limpia la memoria q se haya usado
                ventaRealiza = new Venta(); // se resetea la venta
                detalleVentasVector.vaciarVector(); // vacia el vector de los detalles de venta guardados
                arregloKardexSalidasMemoria.clear(); // vaciar el vector de emoria de Kardex Salidas
                vectorKardex.vaciarVector(); // vacia el vector de los kardex q se hayan cargado
                vectorProductoEspecifico.vaciarArreglo(); // vacia el vector de los productos de X proveedor q se haya cargado
                // regresar a la primera ventana
                jTabbedPane1.setEnabledAt(0, true);
                jTabbedPane1.setSelectedIndex(0);
                // bloquea la ventana de venta
                jTabbedPane1.setEnabledAt(1, false);
                modeloTablaCarrito.setRowCount(0);
            }
            else
            {
                
            }
        }
        catch(Exception e)
        {
            System.out.println("Excepcion en btnFinalizarVenta " + e);
        }
    }//GEN-LAST:event_btnCancelarVentaActionPerformed

    private void btnFinalizarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarVentaActionPerformed
        // TODO add your handling code here:
        // guardar los datos en los archivos vectorProductoGeneral
        try
        {
            int confirmed = JOptionPane.showConfirmDialog(null, 
            "¿Esta seguro de finalizar la venta?", "Mensaje de Avertencia",
            JOptionPane.YES_NO_OPTION);
            if (confirmed == JOptionPane.YES_OPTION) 
            {
                // guardar la venta
                ventaRealiza.setMontoTotal(montoTotal);
                ventaRealiza.setTotalPagar(totalPagar);
                ventasVector.agregarVenta(ventaRealiza);
                ventasVector.grabarEnArchivoGeneral(ventaRealiza);
                // guardar los datos en memoria a los archivos
                // actualizar el kardex de los productos
                for(MemoriaDatos x: memoriasProductoProveedor)
                {
                    vectorProductoEspecifico.vaciarArreglo();
                    System.out.println("\nProducto: " + x.getNombreProducto() + "\nProveedor: " + x.getNombreProveedor());
                    String producto = x.getNombreProducto();
                    String proveedor = x.getNombreProveedor();
                    Proveedor proveEncontrado = vectorproveedor.buscarPorNombre(proveedor);
                    
                    vectorProductoEspecifico.cargardatos_archivo_vector(proveedor);
                    vectorKardex.copiarDtosTemporalesAPrincipal(producto, proveedor);
                    vectorKardex.cargardatos_archivo_vector(producto, proveedor);
                    
                    kardex ultimoKardex = vectorKardex.obtenerUltimoKardex();
                    int stockActualizado = ultimoKardex.getSaldoCant();
                    System.out.println("stockActualizado: " + stockActualizado);
                    
                    Producto productoBuscado = vectorProductoGeneral.buscarNombreProveedor(producto, proveedor);
                    productoBuscado.setCantidad(stockActualizado);
                    
                    
                    Producto productoBuscadoEspecifico = vectorProductoEspecifico.buscarNombreProveedor(producto, proveedor);
                    productoBuscadoEspecifico.setCantidad(stockActualizado);
                    
                    proveEncontrado.setCantidadDeProductos(stockActualizado);
                    
                    vectorProductoGeneral.grabarModificareliminar();
                    vectorProductoEspecifico.grabarModificareliminar(proveedor);
                    vectorproveedor.grabarModificareliminar();
                    
                }
                // guarda los detalle de venta en su archivo respectivo
                detalleVentasVector.actualizarDatos(IDCliente);
                
                // borrando archivos temporales
                for(MemoriaDatos x: memoriasProductoProveedor)
                {
                    String producto = x.getNombreProducto();
                    String proveedor = x.getNombreProveedor();
                    vectorKardex.eliminarArchivoTemporal(producto, proveedor);
                }
                
                // aumentando la cantidad de compra al cliente
                Cliente clienteEncontrado = clienteVector.buscarcodigo(IDCliente);
                if (clienteEncontrado.getCodigoCliente().equals("Error"))
                {
                    
                }
                else
                {
                    int cantidadComprada = clienteEncontrado.getComprasTotales();
                    cantidadComprada++;
                    boolean estadoExistenciaCliente = clienteVector.modificarCantidadCOmpraCliente(
                                                        clienteEncontrado, cantidadComprada);
                    if (estadoExistenciaCliente==true)
                    {
                        clienteVector.grabarModificareliminar();
                    }
                }
                // limpia la memoria q se haya usado y datos
                IDVenta = "";
                ventaRealiza = new Venta(); // se resetea la venta
                detalleVentasVector.vaciarVector(); // vacia el vector de los detalles de venta guardados
                arregloKardexSalidasMemoria.clear(); // vaciar el vector de emoria de Kardex Salidas
                vectorKardex.vaciarVector(); // vacia el vector de los kardex q se hayan cargado
                vectorProductoEspecifico.vaciarArreglo(); // vacia el vector de los productos de X proveedor q se haya cargado
                memoriasProductoProveedor.clear();
                montoTotal = 0;
                totalPagar = 0;
                // regresar a la primera ventana
                jTabbedPane1.setEnabledAt(0, true);
                jTabbedPane1.setSelectedIndex(0);
                txtMontoTotal.setText("");
                txtTotalPagar.setText("");
                // bloquea la ventana de venta
                jTabbedPane1.setEnabledAt(1, false);
                JOptionPane.showMessageDialog(null,"Venta registrada satisfactoriamente");
            }
            else
            {
                
            }
        }
        catch(Exception e)
        {
            System.out.println("Excepcion en btnFinalizarVenta " + e);
        }
    }//GEN-LAST:event_btnFinalizarVentaActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        MenuVendedor mv = new MenuVendedor("vendedor");
        mv.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaVender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaVender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaVender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaVender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaVender().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProductoVenta;
    private javax.swing.JButton btnCancelarVenta;
    private javax.swing.JButton btnCargarCboBox;
    private javax.swing.JButton btnCargarCboBoxProvedor;
    private javax.swing.JButton btnFinalizarVenta;
    private javax.swing.JButton btnRealizarVenta;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> cboBoxIDCliente;
    private javax.swing.JComboBox<String> cboBoxProductos;
    private javax.swing.JComboBox<String> cboBoxProveedores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tablaCarrito;
    private javax.swing.JTable tableCarrito;
    private javax.swing.JTextField txtCantidadVender;
    private javax.swing.JTextField txtDNICliPanel2;
    private javax.swing.JTextField txtDNICliente;
    private javax.swing.JTextField txtIDClienteActualPanel2;
    private javax.swing.JTextField txtIDVenActualPanel2;
    public javax.swing.JTextField txtIDVendedor;
    private javax.swing.JTextField txtMontoTotal;
    private javax.swing.JTextField txtNomCliPanel2;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStockActual;
    private javax.swing.JTextField txtTotalPagar;
    // End of variables declaration//GEN-END:variables
}
